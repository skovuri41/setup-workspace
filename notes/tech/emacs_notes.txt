* Installation
;;;;; installation ;;;;;;;
  1. emacs-starter-kit
  2. rainbow
  3. auto-completion
  4. pop-up
  5. technomancy/emacs-starter-kit
  6. paredit
** Installed Packages
   1. windmove
   2. popup
   3. color-theme-solarized
   4. auto-complete
   5. buffer-move
   6. ace-jump-mode
   7. ace-jump-buffer
   8. jump-char
   9. clojure-mode
   10. color-theme
   11. ac-nrepl
   12. nrepl
   13. moe-theme
   14. starter-kit-lisp
   15. starter-kit-bindings
   16. starter-kit-eshell
   17. deft
   18. anything
   19. bookmark+
   20. clojure-emacs-cheat-sheet
   21. expand-region
   22. zen-and-art
   23. cider mode for clojure, replacement for nrpel

* Basic Cursor Movement
  1. begining of line - C-a
  2. end of line - C-e
  3. end of buffer - M >
  4. begining of buffer - M <
  5. end of file - C-x ]
  6. beginning of file - C-x [
  7. next screen - C-v
  8. prev screen - M-v
  9. save buffer to file - C-x s
   : d - flag the buffer for deletion
   : s - mark for save
   : x - perform all flagged deletions and saves
   : u - remove all flags
   
             C-x-[
	       M-<  
	       M-v  
	       C-p  
   C-a M-b C-b C-l C-f M-f C-e
             C-n  
	       C-v  
	       M->  
	       C-x-]
  10.kill region - C-w
  11.copy region to kill ring - M-w
  12.yank - C-y
  13.cut entire line - C-S-Backspace
  14.select entire buffer - C-x h
  15.undo - C-x u ; C-_ ; C-/
  16.save - C-x s
  17.go to line - M-g M-g
  18.C-x C-b - display buffers list
  19.Kill word M -d
  20.Kill line C-k

* Editing
C-j	New line and indent, equivalent to "enter" followed by "tab"
M-/	Hippie expand, cycles through possible expansions of the text before point
M-\	Delete all spaces and tabs around point. I use this one a lot

* Reading and Writing files		   
;;;;;;; reading and writing files
  1. C-x C-f - find a file, create a new buffer
  2. C-x C-v - visit a file for editing, discard current buffer contents
  3. C-x C-s - save current buffer to file
  4. C-x C-w - write the current buffer into a file and prompt a  file name
  5. C-x C-v - also means refresh the current buffer
  6. C-x 4 f - find file other window
  7. C-x 4 b - select a buffer in other window
  8. M-C-v - scroll other window
  9. C-x b BUFFER <RET> - select or create a buffer name BUFFER.

* Multiple Windows
;;;;; multiple windows ;;;;;
;; S- next, S- Up etc to move between windows
;; change height, width - 
  1. C-x 2 split window vertically
  2. C-x 3 split window in two horizontally
  3. C-x o change to other window
  4. C-x 0 delete window
  5. C-x 1 close all windows except the one the cursors in

* Multiple Frames
;;;;;; multiple frames ;;;;
  1. C-x 5 2 - make new frame
  2. C-x 5 0 - close this frame
  3. C-x 5 o - change to other frame

* Search
*** ;;;;;;Incremental Search ;;;;;;;
  1. C-s - search forward
  2. C-r - search backward
  3. C-g - return to where search started
*** ;;;;;; Non Incremental Search
  1. C-s <RET> string <RET>
  2. C-r <RET> string <RET>
*** ;;;;;; Word Search
A word search finds a sequence of words without regard to the type of
punctuation between them. For instance two words seperated by a
single space, newlines, or punctuation characters.
1. M-s w
2. M-s w <RET> words <RET>
3. M-s w C-r <RET> words <RET>

*** ;;;;; Symbol Search
*** ;;;;; Regular Expression Search
1. C-M-s Begin incremental regexp search
2. C-M-r Begin reverse incremental regexp search

* Replacement Commands
*** Unconditional Replace 
1. M-x replace-string <RET> string <RET> newstring <RET>
*** Regexp Replace
1. M-x replace-regexp <RET> regexp <RET> newstring <RET>
*** Replacement and Case
1. refer case-fold-search and case-replace
*** Query Replace
1. M-% string <RET> newstring <RET>
2. C-M-% regexp <RET> newstring <RET>

* Switch Buffer
;;;; switch buffer
   C-tab, C-S-tab -> customized in init.el 
   'next-buffer and 'prev-buffer
;;;;;
Creating and Selecting Buffers
C-x b buffer <RET>
Select or create a buffer named buffer (switch-to-buffer). 

C-x 4 b buffer <RET>
Similar, but select buffer in another window (switch-to-buffer-other-window). 

C-x 5 b buffer <RET>
Similar, but select buffer in a separate frame (switch-to-buffer-other-frame). 

C-x <LEFT>
Select the previous buffer in the buffer list (previous-buffer). 

C-x <RIGHT>
Select the next buffer in the buffer list (next-buffer). 

* Swap Buffer
;;;; swap buffer
;; install buffer-swap pkg and keybind locally
;; buf-move-up, buf-move-down, buf-move-left, buf-move-right
;;; buffer swap
(global-set-key (kbd "<C-S-up>")     'buf-move-up)
(global-set-key (kbd "<C-S-down>")   'buf-move-down)
(global-set-key (kbd "<C-S-left>")   'buf-move-left)
(global-set-key (kbd "<C-S-right>")  'buf-move-right)

* Window Size
;;; window size
(global-set-key (kbd "<C-x-down>")  'shrink-window)
(global-set-key (kbd "<C-x-up>")    'enlarge-window)
(global-set-key (kbd "<C-x-left>")  'shrink-window-horizontally)
(global-set-key (kbd "<C-x-right>") 'enlarge-window-horizontally)

* Clojure Related
;;; clojure related ;;;;;;
  1. M-q for indentation in paredit
  2. C-x C-e - place at the end of s-ex and evaluate
  3. C-c C-c - evaluate from anywhere in s-exp
  4. C-c C-k - load the current buffer
  5. C-c C-l - load a file
  6. C-C C-s - display the source for the symbol at point
  7. C-c C-z - select the repl buffer.
  8. C-c M-o - clear the entire repl buffer.
  9. C-c M-n - Switch the namespace of the repl buffer to the
     namespace of t he current buffer.
  10. install lein2 and put in PATH ~.bash_profile file append to
      PATH  variable
  11. java in Path
;;; updated to cider from nrepl
;;; refer to smartparens instead of paredit 04/01/2014

*** Cider
1. 
2. 
3. 
4. 
5. 

* nrepl
  1. ac-nrepl
  2. paredit
  3. clojure-mode
  4. Starter-kit-lisp
  5. Starter-kit-eshell

* Par-edit Commands
;;;;;;;;;;;;;;;; paredit commands ;;;;;;
  1. slurp forward - C-<right>, C-) 
  2. forward -  C-<left>
  3. slurp backward - C-M-<left>, C-(
  4. barf backward -  C-M-<right>,
  5. navigate forward s-exp - C-M-f
  6. navigate backward s-exp - C-M-b
  7. join s-exp - M-Shift-j
  8. split s-exp -M-Shift-s
  9. paredit-new line - C-j

;;;;;;depth changing commands
  1. paredit-wrap-around M-(
  2. paredit-splice-sexp - M-s
   (foo (bar | baz) quux)
   (foo bar baz quux)
  3. paredit-splice-sexp-killing-backward - M-<up>
  4. paredit-splice-sexp-killing-forward - M-<down>

;;;;;deleting and killing
  1. paredit-forward-delete - C-d
  2. paredit-backward-delete - DEL
  3. paredit-kill - C-k
  4. paredit-forward-kill-word - M-d
  5. paredit-backward-kill-word - M-DEL

* Rectangle Mode
;;;;;;;; Rectangle Mode 
  1. C-x r k  Kill rectangle  
  2. C-x r d  Delete rectangle
  3. C-x r y  Yank rectangle  
  4. C-x r c  Clear rectangle 
  5. C-x r o  Insert blank space to fill the space of the region-rectangle
  6. C-x r N Insert line numbers along the left edge
  7. C-x r c Clear the region-rectangle by replacing all of contents
     with spaces
  8. M-x delete-whitespace-rectangle
  9. C-x r t string <RET> Replace rectangle contents with string on
     each line
  10. M-x string-insert-rectangle <RET> string <RET> Insert string on
      each line of the rectangle

* Position-Registers
1. C-x r <spc> r : Record the position of point and the current buffer in register r (point-to-register). 
2. C-x r j r : Jump to the position and buffer saved in register r (jump-to-register)
   
* Text-Registers
1. C-x r s r - Copy region into register r (copy-to-register)
2. C-x r i r - Insert text from register
3. M-x append-to-register <RET> r - Append region to text in register r
4. M-x prepend-to-register <RET> r

* Number-Registers
1. C-u number C-x r n r - Store number into register r
2. C-u number C-x r + r - If r contains a number, increment the
   number in that register by number.
3. C-x r i r - Insert the number from register r into the buffer
   
* Rectangles in Registers
1. C-x r r r - copy the region-rectangle into register
2. C-x r i r - insert the rectangle stored in register r

* Bookmarks
;;;;;;; Bookmarks

1. C-x r m <RET> - Set the bookmark for the visited file,at point
2. C-x r m bookmark <RET> - Set the bookmark named bookmark at point (bookmark-set)
3. C-x r b bookmark <RET> - Jump to the bookmark named bookmark
4. C-x r l - List all bookmarks
5. M-x bookmark-save - save all in default bookmark file

* The Mark Ring
1. C-<SPC> C-<SPC>
   Set the mark, pushing it onto the mark ring, without activating it.
2. C-u C-<SPC>
   Move point to where the mark was, and restore the mark from the ring
   of former marks.
If you set set-mark-command-repeat-pop to non-nil, then immediately after you type C-u C-<SPC>, you can type C-<SPC> instead of C-u C-<SPC> to cycle through the mark ring. By default, set-mark-command-repeat-pop is nil.
Each buffer has its own mark ring. All editing commands use the current buffer's mark ring. In particular, C-u C-<SPC> always stays in the same buffer.

* TODO cua mode
* TODO Ido Mode
  1. C-x c-i
  2. 

* TODO TAGS
* TODO FlySpell
* TODO FlyMake
* TODO Magit
* TODO Shell
;;;; Shells
  1. shell-command
  2. shell-command-on-region
  3. M-x shell
  4. M-x eshell
     -
* TODO Yasnippet


;;;; TRAMP - remote access

* Org-Mode
;;;; org-mode
  1. (setq org-replace-disputed-keys t)
     This will result in following replacements:
     - S-Ret -> C-S-RET
     - S-up -> M-p
     - S-down -> M-n
     - S-right -> M-+
     - S-left -> M--
  2.(setq org-return-follows-link t) follow link with Ret.
  3. 
     
* TODO Calculator
 - calc

* Keyboard Macros
;;;; keyboard macros
 1. C-x ( start macro
 2. C-x ) end macro
 3. C-x e execute macro. e - again
 4. M-{number} C-x e Do that last macro (number times)
 5. C-x q Insert a query into a keyboard macro
 6. M-C-c exit-recursive-edit

* Dired
;;;;;;;; Dired
1. C-x d - to enter dired mode
2. C-x C-f (find-file) a directory name to enter dired mode
3. <SPC> and n in Dired are equivalent to C-n. p is equivalent to C-p.
4. j (dired-goto-file) prompts for a file name and moves point to the
   line in dired buffer describing that file.
5. d flag for deletion, u remove the deletion flag, x delete files
   flagged for deletion.
6. # flag all auto-save files for deletion ( files whose name start
   and end with '#')
7. ~ Flag all backup files for deletion.
8. % & - Flag for deletion all files with certain kinds of names
   which suggest you could easily create those files again.
9. % d regexp <RET> - flag for deletion all files whose names match
   the regular expression regexp.
10. f - visiting the file described on the current line. like C-x C-f
11. o - like f, but uses another window to display the file's buffer.
12. C-o visit the file described on the current line, and display the
    buffer in another window.
13. C "new dirname or filename" <RET>
14. D delete the specified files.
15. R new <RET> Rename the specified files.
16. S new <RET> symbolic link
17. T timestamp <RET> Touch the specified files, update the
    modification time.
18. :d , :e for decrypt and encrypt
19. L to Load the specified Emacs Lisp files.
20. C-x C-q while in Dired buffer takes to Wdired mode special mode
    that allows you to perform file operations by edition the Dired
    buffer directly.
21. % u Rename each of the selected files to upper case
22. % l Rename each of the selected files to lower case
23. % R from <RET> to <RET>, % C, % H and % S - regex substitution.
    
* Deft Mode
    1. RET — open the current file
    2. C-c C-n / C-RET — create a new file (auto named)
    3. C-c RET — create a new file (prompt for name)
    4. C-c C-r — rename a file
    5. C-c C-d — delete a file 

    1 (kbd "DEL") 'deft-filter
    2 (kbd "M-DEL") 'deft-filter-decrement-word

***    ;; Handle return via completion or opening file
    3 (kbd "RET") 'deft-complete
   
***    ;; Filtering
    4 (kbd "C-c C-l") 'deft-filter
    5 (kbd "C-c C-c") 'deft-filter-clear
    6 (kbd "C-y") 'deft-filter-yank
  
***    ;; File creation
    7 (kbd "C-c C-n") 'deft-new-fil
    8 (kbd "C-c C-m") 'deft-new-file-named
    9 (kbd "<C-return>") 'deft-new-file-named

***    ;; File management
   10 (kbd "C-c C-d") 'deft-delete-file
   11  (kbd "C-c C-r") 'deft-rename-file
   12  (kbd "C-c C-f") 'deft-find-file
   13  (kbd "C-c C-a") 'deft-archive-file
   
***    ;; Setting
   14  (kbd "C-c C-t") 'deft-toggle-incremental-search
 
***    ;; Miscellaneous
   15  (kbd "C-c C-g") 'deft-refresh
   16  (kbd "C-c C-q") 'quit-window

***    ;; Widget
   17  [down-mouse-1] 'widget-button-click
   18  [down-mouse-2] 'widget-button-click
   19  (kbd "<tab>") 'widget-forward
   20  (kbd "<backtab>") 'widget-backward
   21  (kbd "<S-tab>") 'widget-backward
   22  (kbd "C-o") 'deft-open-file-other-window

* Useful Commands
;; useful commands ;;;;;;;;
  1. M-x package-refresh-contents
  2. M-x package-install

* Miscellaneous
;;;;;;;; Misc ;;;;;;;
  1. C-x C-c - exit emacs
  2. C-x z - emacs repeat command
  3. C-u n - repeat the follwing command n times
  4. package-list-packages
     
* Refer Later
;;;;;; refer later ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  1. artist-mode

* Installed Packages
C-h v package-activated-list

ace-jump-buffer ace-jump-mode anything auto-complete bookmark+
buffer-move cider clojure-mode clojure-snippets color-theme-solarized
color-theme deft dynamic-fonts expand-region font-utils helm jump-char
mark-tools moe-theme noctilux-theme persistent-soft list-utils pcache
pkg-info dash popup rainbow-delimiters s starter-kit-bindings
starter-kit-eshell starter-kit-lisp elisp-slime-nav starter-kit magit
git-rebase-mode git-commit-mode ido-ubiquitous smex
find-file-in-project idle-highlight-mode paredit sublime-themes
w32-browser yasnippet zen-and-art-theme zoom-frm frame-cmds frame-fn
* Removing Blank Lines in a Buffer
 M-x flush-lines RET ^$ RET

And you’re done. So what does that mean? Well, M-x flush-lines will
flush (remove) lines that match a regular expression, and ^$ contain
the meta-characters ^ for beginning of string and $ for end of
string. Ergo, if the two meta-characters are next to eachother, it
must be a blank line.

* Help
;;;; help ;;;;
1. C-h Displays help windows
2. C-h-m - show key bindings
3. C-h-k - help for key sequence
4. C-h-f - help for function
5. C-h-v - help for variable

#  LocalWords:  FlyMake magit lein namespace clojure nrepl technomancy el Clojure Dired paredit ido FlySpell
#  LocalWords:  yasnippet  cua windmove emacs eshell dirname filename
#  LocalWords:  timestamp decrypt Wdired dired goto regex
* Key Bindings reference 
Refer script in steckemacs which will generate the table for all
available key-bindings, until then manually update the following table
for reference.
  |--------------------+--------------------------------------------------------------+----------------|
  | Key Binding        | Description                                                  | Category       |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-q            | Change read only mode                                        | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x (              | Start a macro                                                | Keyboard Macro |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x )              | End a macro                                                  | Keyboard Macro |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x e              | Execute macro again                                          | Keyboard Macro               |
  |--------------------+--------------------------------------------------------------+----------------|
  | M-{number} C-x e   | Do that last macro (number times)                            | Keyboard Macro               |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x q              | Insert a query into keyboard macro                           | Keyboard Macro               |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-r            | Open Recent Files                                            | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-f            | find a file, create a new buffer                             | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-v            | visit a file for editing, discard current buffer contents    | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-s            | save current buffer to file                                  | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-w            | write the current buffer into a file and prompt a  file name | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x C-v            | also means refresh the current buffer                        | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x 4 f            | find file other window                                       | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x 4 b            | select a buffer in other window                              | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | M-C-v              | scroll other window                                          | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  | C-x b BUFFER <RET> | select or create a buffer name BUFFER.                       | General        |
  |--------------------+--------------------------------------------------------------+----------------|
  |                    |                                                              |                |
 
* Emacs on Cygwin Crashes frequently
run' rebaseall -v ' command from /cygwin/ash window
